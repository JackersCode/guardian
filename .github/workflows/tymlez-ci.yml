name: Tymlez CI

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '*.*'
    paths-ignore:
      - '**/*.md'

env:
  CI: 'true'
  AWS_SDK_LOAD_CONFIG: 'true'
  AWS_REGION: ap-southeast-2
  AWS_DEFAULT_REGION: ap-southeast-2

jobs:
# Paul Debug
  # install:
  #   runs-on: ubuntu-latest
  #   if: "!contains(github.ref, 'dependabot/')"
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Use Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '16.x'

  #     - name: restore npm
  #       id: npm-cache
  #       uses: actions/cache@v2
  #       with:
  #         path: |
  #           node_modules
  #           */node_modules
  #           */*/node_modules
  #         key: ${{ runner.os }}-lerna-${{ hashFiles('**/package-lock.json') }}

  #     - name: npm install
  #       if: steps.npm-cache.outputs.cache-hit != 'true'
  #       run: |
  #         npm install

  # check:
  #   runs-on: ubuntu-latest
  #   needs: install
  #   if: "!contains(github.ref, 'dependabot/')"
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Use Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '16.x'

  #     - name: restore npm
  #       id: npm-cache
  #       uses: actions/cache@v2
  #       with:
  #         path: |
  #           node_modules
  #           */node_modules
  #           */*/node_modules
  #         key: ${{ runner.os }}-lerna-${{ hashFiles('**/package-lock.json') }}

  #     - name: npm install
  #       if: steps.npm-cache.outputs.cache-hit != 'true'
  #       run: |
  #         npm install

  #     - name: Check
  #       run: |
  #         npm run build
  #         npm run lint

  deploy-dev:
    strategy:
      fail-fast: false
      matrix:
        job: [cohort]
    runs-on: ubuntu-latest
    # Paul Debug
    # if: github.ref == 'refs/heads/main'
    # needs: check
    env:
      ENV: 'dev'
      CLIENT_NAME: '${{ matrix.job }}'

    steps:
      - name: Get GIT_SHA and GIT_TAG
        env:
          GIT_TAG: ${{ github.sha }}
        run: |
          GIT_SHA=${GIT_TAG:0:7}

          echo "GIT_SHA=$GIT_SHA"
          echo "GIT_SHA=$GIT_SHA" >> $GITHUB_ENV

          echo "GIT_TAG=$GIT_TAG"
          echo "GIT_TAG=$GIT_TAG" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v2

      # - name: Use Node.js
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: '16.x'

      # - name: restore npm
      #   id: npm-cache
      #   uses: actions/cache@v2
      #   with:
      #     path: |
      #       node_modules
      #       */node_modules
      #       */*/node_modules
      #     key: ${{ runner.os }}-lerna-${{ hashFiles('**/package-lock.json') }}

      # - name: npm install
      #   if: steps.npm-cache.outputs.cache-hit != 'true'
      #   run: |
      #     npm install

      - name: Deploy (${{ matrix.job }})
        run: |
          aws sts get-caller-identity

          aws ssm get-parameter --name /${ENV}/tymlez-platform/gcp-ci-credentials.json --with-decryption | jq ".Parameter.Value | fromjson" > gcp-ci-credentials.json || true
          export GCP_PROJECT_ID=`aws ssm get-parameter --name /${ENV}/tymlez-platform/gcp-project-id | jq ".Parameter.Value"`
          export GCP_REGION=`aws ssm get-parameter --name /${ENV}/tymlez-platform/gcp-region | jq ".Parameter.Value"`
          export GKE_CLUSTER=`aws ssm get-parameter --name /${ENV}/tymlez-platform/gke-cluster | jq ".Parameter.Value"`

          echo GCP_PROJECT_ID=$GCP_PROJECT_ID
          echo GCP_REGION=$GCP_REGION
          echo GKE_CLUSTER=$GKE_CLUSTER

          gcloud auth login --cred-file "$PWD/gcp-ci-credentials.json"
          gcloud auth list
          gcloud config get-value account
          gcloud config get-value project
          gcloud config set project $GCP_PROJECT_ID
          gcloud config get-value project

          gcloud container clusters list
          # Paul Debug: Call this in `deployToGke.ts`
          gcloud container clusters get-credentials $GKE_CLUSTER --region $GCP_REGION
          kubectl get all
          helm list

          # Paul Debug: uncomment
          # npm run deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets[format('{0}_{1}_AWS_ACCESS_KEY_ID', matrix.job, env.ENV)] }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[format('{0}_{1}_AWS_SECRET_ACCESS_KEY', matrix.job, env.ENV)] }}




