name: Tymlez CI

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '*.*'
    paths-ignore:
      - '**/*.md'

env:
  CI: 'true'
  AWS_SDK_LOAD_CONFIG: 'true'
  AWS_REGION: ap-southeast-2
  AWS_DEFAULT_REGION: ap-southeast-2

jobs:
# Paul Debug
  # install:
  #   runs-on: ubuntu-latest
  #   if: "!contains(github.ref, 'dependabot/')"
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Use Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '16.x'

  #     - name: restore npm
  #       id: npm-cache
  #       uses: actions/cache@v2
  #       with:
  #         path: |
  #           node_modules
  #           */node_modules
  #           */*/node_modules
  #         key: ${{ runner.os }}-lerna-${{ hashFiles('**/package-lock.json') }}

  #     - name: npm install
  #       if: steps.npm-cache.outputs.cache-hit != 'true'
  #       run: |
  #         npm install

  # check:
  #   runs-on: ubuntu-latest
  #   needs: install
  #   if: "!contains(github.ref, 'dependabot/')"
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Use Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '16.x'

  #     - name: restore npm
  #       id: npm-cache
  #       uses: actions/cache@v2
  #       with:
  #         path: |
  #           node_modules
  #           */node_modules
  #           */*/node_modules
  #         key: ${{ runner.os }}-lerna-${{ hashFiles('**/package-lock.json') }}

  #     - name: npm install
  #       if: steps.npm-cache.outputs.cache-hit != 'true'
  #       run: |
  #         npm install

  #     - name: Check
  #       run: |
  #         npm run build
  #         npm run lint

  deploy-dev:
    strategy:
      fail-fast: false
      matrix:
        job: [cohort]
    runs-on: ubuntu-latest
    # Paul Debug
    # if: github.ref == 'refs/heads/main'
    # needs: check
    env:
      ENV: 'dev'
      CLIENT_NAME: '${{ matrix.job }}'

    steps:
      - name: Get GIT_SHA and GIT_TAG
        env:
          GIT_TAG: ${{ github.sha }}
        run: |
          GIT_SHA=${GIT_TAG:0:7}

          echo "GIT_SHA=$GIT_SHA"
          echo "GIT_SHA=$GIT_SHA" >> $GITHUB_ENV

          echo "GIT_TAG=$GIT_TAG"
          echo "GIT_TAG=$GIT_TAG" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'

      - name: restore npm
        id: npm-cache
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            */node_modules
            */*/node_modules
          key: ${{ runner.os }}-lerna-${{ hashFiles('**/package-lock.json') }}

      - name: npm install
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: |
          npm install

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v0

      - name: Deploy (${{ matrix.job }})
        run: |
          # Paul Debug
          # # Refer to https://stackoverflow.com/questions/65295958/docker-compose-not-working-with-gcloud-cannot-find-openssl
          # # docker-compose Not Working With gcloud: Cannot Find OpenSSL
          # export LD_LIBRARY_PATH=/usr/local/lib

          gcloud info
          aws sts get-caller-identity

          aws ssm get-parameter --name /${ENV}/tymlez-platform/gcp-ci-credentials.json --with-decryption | jq ".Parameter.Value | fromjson" > gcp-ci-credentials.json || true
          export GCP_PROJECT_ID=`aws ssm get-parameter --name /${ENV}/tymlez-platform/gcp-project-id | jq -r ".Parameter.Value"`

          echo GCP_PROJECT_ID=$GCP_PROJECT_ID

          gcloud auth login --cred-file "$PWD/gcp-ci-credentials.json"
          gcloud config set project $GCP_PROJECT_ID
          rm ~/.docker/config.json
          gcloud auth configure-docker

          npm run deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets[format('{0}_{1}_AWS_ACCESS_KEY_ID', matrix.job, env.ENV)] }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[format('{0}_{1}_AWS_SECRET_ACCESS_KEY', matrix.job, env.ENV)] }}
          LD_LIBRARY_PATH: /usr/local/lib
          CLOUDSDK_PYTHON: /usr/bin/python3



